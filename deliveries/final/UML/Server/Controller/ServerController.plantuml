@startuml

title __SERVER CONTROLLER Class Diagram__\n


      namespace controller {
        class controller.ActionManager {
            + ActionManager()
            + getWinner()
            + handleRequest()
            + nextPhase()
            # startNextRound()
            - handleBuildAction()
            - handleMoveAction()
            - handleSelectWorkerAction()
            - built()
            - gameEndingPhase()
            - handleEndBuildAction()
            - handleEndMoveAction()
            - handleEndTurnAction()
            - handlePowerButton()
            - isYourTurn()
            - playerHasLost()
            - playerHasWonAfterMoving()
            - someoneHasWonAfterBuilding()
            - winningMove()
            - workerMoved()
            - workerSelected()
            - wrongRequest()
        }
      }


  


      namespace controller {
        class controller.MasterController {
            + MasterController()
            + clientConnectionException()
            + dispatcher()
            + gameOver()
            + getGameInstance()
            + init()
            + startFirstRound()
        }
      }


  


      namespace controller {
        class controller.OutgoingMessageManager {
            + OutgoingMessageManager()
            + buildNegativeResponse()
            + buildPositiveResponse()
            + buildServerRequest()
            + buildWonResponse()
            + sendPlayersInfo()
            + updateClients()
            - buildResponse()
        }
      }



      namespace controller {
        enum PossibleGameState {
          ASSIGNING_GOD
          BUILD_BEFORE
          BUILT
          FILLING_BOARD
          GAME_INIT
          GAME_OVER
          GODLIKE_PLAYER_MOMENT
          PLAYER_HAS_LOST
          PLAYER_TURN_ENDING
          START_ROUND
          WORKER_MOVED
          WORKER_SELECTED
          description
        }
      }

  


      namespace controller {
        class controller.SetUpGameManager {
            - currentPlayer : int
            - playerLoop : int
            - workerPlaced : Integer
            + SetUpGameManager()
            + assignGodToPlayer()
            + handleMessage()
            + nextPlayer()
            + notifyTheGodLikePlayer()
            - handleChooseGods()
            - handlePickGod()
            - handlePlaceWorker()
            - isYourTurn()
        }
      }



      namespace controller {
        class controller.TurnManager {
            - actionPerformedByActivePlayer : List<Action>
            - inGamePlayers : List<Player>
            + TurnManager()
            + activePlayerHasBuilt()
            + activePlayerHasMoved()
            + addActionPerformed()
            + getActivePlayer()
            + nextTurn()
            + updateTurnState()
            - giveTurnOwnership()
            - updatePlayerState()
        }
      }

  

  controller.ActionManager -- model.action.ActionOutcome : actionOutcome
  controller.ActionManager -- model.player.Player : activePlayer
  controller.ActionManager -- network.message.clientrequests.Request : currentRequest
  controller.ActionManager -- model.Game : gameInstance
  controller.ActionManager -- controller.PossibleGameState : gameState
  controller.ActionManager -- controller.OutgoingMessageManager : outgoingMessageManager
  controller.ActionManager -- controller.TurnManager : turnManager
  controller.ActionManager -- model.player.Player : winner
  controller.MasterController -- controller.ActionManager : actionManager
  controller.MasterController -- model.Game : gameInstance
  controller.MasterController -- controller.OutgoingMessageManager : messageManager
  controller.MasterController -- network.Server : server
  controller.MasterController -- controller.SetUpGameManager : setUpGameManager
  controller.MasterController -- controller.TurnManager : turnManager
  controller.OutgoingMessageManager -- model.Game : gameInstance
  controller.OutgoingMessageManager -- controller.TurnManager : turnManager
  controller.SetUpGameManager -- model.player.Player : activePlayer
  controller.SetUpGameManager -- model.Game : gameInstance
  controller.SetUpGameManager -- controller.OutgoingMessageManager : outgoingMessageManager
  controller.SetUpGameManager -- controller.PossibleGameState : setupGameState
  controller.TurnManager -- model.player.Player : activePlayer
  controller.TurnManager -- model.player.Worker : activeWorker
  controller.TurnManager -- model.player.Player : lastActivePlayer
  controller.TurnManager -- model.player.Worker : lastActiveWorker
  controller.TurnManager -- model.player.PossiblePlayerState : playerState

right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
